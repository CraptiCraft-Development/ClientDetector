/*
 * This file is part of ClientDetector - https://github.com/Sportkanone123/ClientDetector
 * Copyright (C) 2021 Sportkanone123
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


package de.sportkanone123.clientdetector.spigot.hackdetector.impl;

import com.tcoded.folialib.FoliaLib;
import com.tcoded.folialib.wrapper.task.WrappedTask;
import de.sportkanone123.clientdetector.spigot.ClientDetector;
import de.sportkanone123.clientdetector.spigot.manager.ConfigManager;
import net.md_5.bungee.api.chat.ClickEvent;
import net.md_5.bungee.api.chat.TextComponent;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerMoveEvent;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

public class ChatExploit {

    private static FoliaLib foliaLib = ClientDetector.getFoliaLib();
    private static WrappedTask timerTask;

    static HashMap<Player, Boolean> verificationStarted = new HashMap<>();
    static HashMap<Player, String> randomString = new HashMap<>();
    static HashMap<Player, Integer> secondsLeft = new HashMap<>();

    public static void startDetection(Player player){
        if(ConfigManager.getConfig("config").getBoolean("hackdetector.chatexploit.enableChatExploit") && !player.hasPermission("clientdetector.bypass")){
            verificationStarted.put(player, true);
            randomString.put(player, UUID.randomUUID().toString());
            secondsLeft.put(player, ConfigManager.getConfig("config").getInt("hackdetector.chatexploit.kickAfterSeconds"));

            sendMessage(player);

            timerTask = foliaLib.getImpl().runTimer(() -> {
                if (verificationStarted.containsKey(player)) {
                    if (secondsLeft.get(player) - 1 == 0) {
                        Bukkit.dispatchCommand(Bukkit.getConsoleSender(), ChatColor.translateAlternateColorCodes('&', ConfigManager.getConfig("config").getString("hackdetector.chatexploit.punishCommand").replace("%prefix%", ConfigManager.getConfig("message").getString("prefix")).replace("%player_name%", player.getName()).replace("%player_uuid%", player.getUniqueId().toString())));
                        timerTask.cancel();
                    } else {
                        secondsLeft.put(player, secondsLeft.get(player) - 1);
                        sendMessage(player);
                    }
                }
            }, 0L, 1L, TimeUnit.SECONDS);
        }
    }

    public static void handleChat(Player player, AsyncPlayerChatEvent event){
        if(randomString.containsKey(player) && event.getMessage().equalsIgnoreCase(".say " + randomString.get(player))){
            verificationStarted.remove(player);

            event.setCancelled(true);

            player.sendMessage(ChatColor.translateAlternateColorCodes('&', ConfigManager.getConfig("message").getString("hackdetector.chatexploit.success").replace("%prefix%", ConfigManager.getConfig("message").getString("prefix"))));
        }
    }

    public static void handleMovement(Player player, PlayerMoveEvent event){
        if(verificationStarted.containsKey(player) && ConfigManager.getConfig("config").getBoolean("hackdetector.chatexploit.disableMoving")){
            event.setCancelled(true);
        }
    }

    public static void sendMessage(Player player){
        if(ConfigManager.getConfig("message").get("hackdetector.chatexploit.clickabletext") != null){
            ArrayList<String> messages = (ArrayList<String>) ConfigManager.getConfig("message").get("hackdetector.chatexploit.clickabletext");
            TextComponent componentBuilder = new TextComponent();

            for(String string: messages){
                componentBuilder = new TextComponent();

                componentBuilder.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, ".say " + randomString.get(player)));
                componentBuilder.setText(ChatColor.translateAlternateColorCodes('&', string.replace("%prefix%", ConfigManager.getConfig("message").getString("prefix")).replace("%time%", secondsLeft.get(player).toString())));

                player.spigot().sendMessage(componentBuilder);
            }

        }
    }

    public static void handleQuit(Player player){
        verificationStarted.remove(player);
        randomString.remove(player);
        secondsLeft.remove(player);
    }

    public static WrappedTask getTimerTask() {
        return timerTask;
    }
}
